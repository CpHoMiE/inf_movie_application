{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["Poster","_ref2","movie_poster_url","alt","react_default","a","createElement","className","src","title","MovieGenre","_ref3","genre","Movie","_ref","poster","genres","synopsis","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","_this","movies_data","MovieData","src_Movie","medium_cover_image","id","_parseMovies","_callee","regenerator_default","wrap","_context","prev","next","_callMovieApi","sent","setState","stop","fetch","then","response","json","response_json","data","movies","catch","err","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUAiCA,SAASA,EAATC,GAAuC,IAAtBC,EAAsBD,EAAtBC,iBAAiBC,EAAKF,EAALE,IAChC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAeC,IAAKN,EAAkBO,MAAON,EAAKA,IAAKA,IAI1E,SAASO,EAATC,GAA4B,IAAPC,EAAOD,EAAPC,MACnB,OACER,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAeK,EAA/B,KAoBWC,MAtDf,SAAAC,GAA8C,IAA9BL,EAA8BK,EAA9BL,MAAMM,EAAwBD,EAAxBC,OAAOC,EAAiBF,EAAjBE,OAAOC,EAAUH,EAAVG,SAClC,OACEb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAACN,EAAD,CAAQE,iBAAoBa,EAAQZ,IAAKM,KAE3CL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,UAAKG,GACLL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACZS,EAAOE,IAAI,SAACN,EAAMO,GAAP,OAAef,EAAAC,EAAAC,cAACI,EAAD,CAAYE,MAAOA,EAAOQ,IAAKD,OAE5Df,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAACe,EAAAhB,EAAD,CACEiB,KAAML,EACNM,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,gBC6BLC,6MA/CbC,MAAQ,KAORC,cAAgB,WAUd,OATmBC,EAAKF,MAAMG,YAAYb,IAAI,SAACc,GAE/C,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,CACCxB,MAAOuB,EAAUvB,MACjBM,OAAQiB,EAAUE,mBAClBd,IAAKY,EAAUG,GACfnB,OAAQgB,EAAUhB,OAClBC,SAAUe,EAAUf,gBAK9BmB,kCAAe,SAAAC,IAAA,IAAAN,EAAA,OAAAO,EAAAjC,EAAAkC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACaZ,EAAKa,gBADlB,OACPZ,EADOS,EAAAI,KAEbd,EAAKe,SAAS,CACZd,gBAHW,wBAAAS,EAAAM,SAAAT,QAOfM,cAAgB,WACd,OAAOI,MAAM,iEACZC,KAAK,SAAAC,GAAQ,OAAEA,EAASC,SACxBF,KAAK,SAAAG,GAAa,OAAEA,EAAcC,KAAKC,SACvCC,MAAM,SAAAC,GAAG,OAAEC,QAAQC,IAAIF,yFA3BxBG,KAAKtB,gDA8BC,IACEL,EAAgB2B,KAAK9B,MAArBG,YACR,OACE3B,EAAAC,EAAAC,cAAA,OAAKC,UAAWwB,EAAc,MAAQ,eACnCA,EAAc2B,KAAK7B,gBAAkB,qBAxC5B8B,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC","file":"static/js/main.d2ea3ea1.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Movie.css';\r\nimport LinesEllipsis from 'react-lines-ellipsis';\r\n\r\n/* This Functions are Stateless Functional Component */\r\n\r\nfunction Movie({title,poster,genres,synopsis}){\r\n  return(\r\n    <div className=\"Movie\">\r\n      <div className=\"Movie_Columns\">\r\n        <Poster movie_poster_url = {poster} alt={title}/>\r\n      </div>\r\n      <div className=\"Movie_Columns\">\r\n        <h2>{title}</h2>\r\n        <div className=\"Movie_Genres\">\r\n          {genres.map((genre,index)=><MovieGenre genre={genre} key={index} />)}\r\n        </div>\r\n        <div className=\"Movie_Synopsis\">\r\n          <LinesEllipsis\r\n            text={synopsis}\r\n            maxLine='3'\r\n            ellipsis=\"...\"\r\n            trimRight\r\n            basedOn=\"letters\">\r\n          </LinesEllipsis>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n/* stateless functional component */\r\nfunction Poster({movie_poster_url,alt}){\r\n  return(\r\n    <img className=\"Movie_Poster\" src={movie_poster_url} title={alt} alt={alt}></img>\r\n  );\r\n}\r\n\r\nfunction MovieGenre({genre}){\r\n  return(\r\n    <span className=\"Movie_Genre\">{genre} </span>\r\n  );\r\n}\r\n\r\n/* Parent Component로부터 넘어오는 props Data Field의 Data type 요건을 정의해놓는다. */\r\n/* isRequired 선언 시, 해당 조건은 필수가 됨. 맞지 않는 Data type이 들어오면 console로 에러 리턴 */\r\nMovie.propTypes = {\r\n  title:PropTypes.string.isRequired,\r\n  poster:PropTypes.string.isRequired,\r\n  genres:PropTypes.array.isRequired,\r\n  synopsis:PropTypes.string.isRequired\r\n}\r\nPoster.propTypes = {\r\n  movie_poster_url:PropTypes.string.isRequired,\r\n  alt:PropTypes.string.isRequired\r\n}\r\nMovieGenre.propTypes={\r\n  genre:PropTypes.string.isRequired\r\n}\r\n\r\nexport default Movie;\r\n","import React,{Component} from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\nclass App extends Component {\n\n  state = {\n  }\n\n  componentDidMount(){\n    this._parseMovies();\n  }\n\n  _renderMovies = () =>{\n    const movieDatas = this.state.movies_data.map((MovieData)=>{\n\n    return <Movie\n            title={MovieData.title}\n            poster={MovieData.medium_cover_image}\n            key={MovieData.id}\n            genres={MovieData.genres}\n            synopsis={MovieData.synopsis}/>\n    });\n    return movieDatas;\n  }\n\n  _parseMovies = async () =>{\n    const movies_data = await this._callMovieApi();\n    this.setState({\n      movies_data\n    });\n  }\n\n  _callMovieApi = () =>{\n    return fetch('https://yts.am/api/v2/list_movies.json?sort_by=download_count')\n    .then(response=>response.json())\n    .then(response_json=>response_json.data.movies)\n    .catch(err=>console.log(err));\n  }\n\n  render(){\n    const { movies_data } = this.state;\n    return (\n      <div className={movies_data ? \"App\" : \"App-Loading\"}>\n        {movies_data ? this._renderMovies() : 'Loading...'}\n      </div>\n      // <div className=\"App\">\n      // {this.state.movies_data ? this._renderMovies() : 'Loading...'}\n      // </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}